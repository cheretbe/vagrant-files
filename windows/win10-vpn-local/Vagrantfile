require File.expand_path("../../../lib/host_functions.rb", __FILE__)

local_settings_profile = read_local_settings([
  {"name" => "ovpn_client_server_type"}
])

if local_settings_profile.ovpn_client_server_type == "purevpn"
  local_settings = read_local_settings([
    {"name" => "ovpn_client_server_type"},
    {"name" => "ovpn_client_server", "default" => "nl2-ovpn-udp.pointtoserver.com"},
    {"name" => "ovpn_client_protocol", "default" => "udp"},
    {"name" => "ovpn_client_purevpn_user"},
    {"name" => "ovpn_client_purevpn_password"},
    {"name" => "sound", "default" => false},
    {"name" => "common_repo_source", "default" => "master"}
  ])
  router_extra_vars = {
    "ovpn_client_purevpn_user"     => local_settings.ovpn_client_purevpn_user,
    "ovpn_client_purevpn_password" => local_settings.ovpn_client_purevpn_password,
    "router_wan_if_name"           => "ovpn-purevpn"
  }
elsif local_settings_profile.ovpn_client_server_type == "chere"
  local_settings = read_local_settings([
    {"name" => "ovpn_client_server_type"},
    {"name" => "ovpn_client_server", "default" => "vpn.chere.one"},
    {"name" => "ovpn_client_protocol", "default" => "udp"},
    {"name" => "ovpn_client_chere_ta_key_file"},
    {"name" => "ovpn_client_chere_client_cert_file"},
    {"name" => "ovpn_client_chere_client_key_file"},
    {"name" => "sound", "default" => false},
    {"name" => "common_repo_source", "default" => "master"}
  ])
  router_extra_vars = {
    "ovpn_client_chere_ta_key_file"      => local_settings.ovpn_client_chere_ta_key_file,
    "ovpn_client_chere_client_cert_file" => local_settings.ovpn_client_chere_client_cert_file,
    "ovpn_client_chere_client_key_file"  => local_settings.ovpn_client_chere_client_key_file,
    "router_wan_if_name"                 => "ovpn-chere"
  }
elsif
  @vagrant_ui.error ("Wrong ovpn_client_server_type value: #{local_settings_profile.ovpn_client_server_type}\nAborting")
  abort
end

Vagrant.configure("2") do |config|
  define_ansible_controller(
    config=config,
    ip="192.168.80.10",
    intnet_name: "vagrant-win-vpn",
    common_repo_source: local_settings.common_repo_source
  )

  config.vm.define :"router" do |router|
    router.vm.box = "ubuntu/focal64"
    router.vm.hostname = "router"
    router.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--uart1", "off"]
      vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
    end

    router.vm.network "private_network", ip: "192.168.80.11",
      virtualbox__intnet: "vagrant-win-vpn", mac: "080027F441DB"

    router.vm.synced_folder "/", "/host"
    router.vm.synced_folder Dir.home, "/host_home"

    router.vm.provision "shell", name: "Enable cleartext passwords for SSH",
      keep_color: true,
      inline: <<-SHELL
        set -euo pipefail
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL

    # It seems that "Configuring and enabling network interfaces..." step of
    # `vagrant up` somehow breaks routing through the VPN. Until we know what
    # exactly going on, use this crude workaround
    router.vm.provision "shell", name: "Restart openvpn-client@purevpn service",
      keep_color: true, run: "always",
      inline: <<-SHELL
        set -euo pipefail
        if systemctl is-active --quiet openvpn-client@purevpn; then
          echo "Restarting openvpn-client@purevpn service"
          systemctl restart openvpn-client@purevpn
        fi
      SHELL

    ansible_provision router,
      playbook="router_provision.yml",
      extra_vars: router_extra_vars.merge(
        {
          "ovpn_client_server"       => local_settings.ovpn_client_server,
          "ovpn_client_server_type"  => local_settings.ovpn_client_server_type,
          "ovpn_client_protocol"     => local_settings.ovpn_client_protocol,
          "ovpn_client_operator"     => "vpn-operator",
          "ovpn_client_operator_key" => "/vagrant/.vagrant/machines/router/virtualbox/private_key",
          "router_lan_if_mac_addr"   => "08:00:27:f4:41:db"
        }
      )
  end

  config.vm.define "win10" do |win10|
    win10.vm.box = "cheretbe/win10_gui"

    win10.vm.provider "virtualbox" do |vb|
      if local_settings.sound
        add_audio_controler(vb)
      end
    end

    win10.vm.network "private_network", ip: "192.168.80.12", virtualbox__intnet: "vagrant-win-vpn"

    win10.vm.synced_folder "/", "/host"
    win10.vm.synced_folder Dir.home, "/host_home"

    # "Configuring and enabling network interfaces..." step of `vagrant up`
    # resets default route. Fixing
    win10.vm.provision "shell", name: "Force default route fix",
        run: "always", keep_color: true, path: "provision/win_on_up.ps1",
        args: "-vagrantPassword #{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}"

    ansible_provision win10,
      playbook="win_provision.yml",
      extra_vars: {
        "ansible_password":                      "#{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}",
        "win_vpn_client_user_name":              "vagrant",
        "win_vpn_client_router":                 "192.168.80.11",
        "win_vpn_client_router_operator":        "vpn-operator",
        "win_vpn_client_router_operator_key":    "/vagrant/.vagrant/machines/router/virtualbox/private_key",
        "win_vpn_client_router_vpn_service_name": local_settings.ovpn_client_server_type
      }
  end
end
