require "yaml"

if not ENV.has_key?('AO_DEFAULT_VAGRANT_PASSWORD')
  abort "This Vagrantfile needs AO_DEFAULT_VAGRANT_PASSWORD environment variable to be defined. Aborting"
end

purevpn_server = "nl2-ovpn-udp.pointtoserver.com"
purevpn_protocol = "udp"
purevpn_user = nil
purevpn_password = nil
if File.file?("local-config.yml")
  local_config = YAML.load_file("local-config.yml")
  unless local_config.nil?
    purevpn_server = local_config.fetch("purevpn_server", purevpn_server)
    purevpn_protocol = local_config.fetch("purevpn_protocol", purevpn_protocol)
    purevpn_user = local_config.fetch("purevpn_user", purevpn_user)
    purevpn_password = local_config.fetch("purevpn_password", purevpn_password)
  end
end

if purevpn_user.nil?
  abort "'purevpn_user' setting in 'local-config.yml' file is missing. Aborting."
end
if purevpn_password.nil?
  abort "'purevpn_password' setting in 'local-config.yml' file is missing. Aborting."
end

Vagrant.configure("2") do |config|
  config.vm.define :"router" do |router|
    router.vm.box = "ubuntu/focal64"
    router.vm.hostname = "router"
    router.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--uart1", "off"]
      vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
    end

    router.vm.network "private_network", ip: "192.168.80.11", virtualbox__intnet: "vagrant-win-vpn"
    router.vm.provision "shell", name: "Enable cleartext passwords for SSH",
      keep_color: true,
      inline: <<-SHELL
        set -euo pipefail
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL
  end

  config.vm.define "win10" do |win10|
    win10.vm.box = "cheretbe/win10ltsc2019_ru_64"
    win10.winrm.username = "vagrant"
    win10.winrm.password = "#{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}"
    win10.vm.boot_timeout = 900

    win10.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = "2"
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    end

    win10.vm.network "private_network", ip: "192.168.80.12", virtualbox__intnet: "vagrant-win-vpn"

    win10.vm.provision "shell", path: "provision/win_setup_vpn.ps1",
      args: "-vpnGateway 192.168.80.11",
      run: "always"

    win10.vm.provision "file", source: "provision/win_setup_vpn.ps1",
      destination: "c:\\users\\vagrant\\win_setup_vpn.ps1"

    win10.vm.provision "shell", path: "provision/win_provision.ps1",
      args: "-taskUserPassword #{ENV['AO_DEFAULT_VAGRANT_PASSWORD']} -vpnGateway 192.168.80.11"
  end

  config.vm.define :"ansible-controller" do |ansible_controller|
    ansible_controller.vm.box = "cheretbe/ansible-controller"
    ansible_controller.vm.hostname = "ansible-controller"
    ansible_controller.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
    end
    ansible_controller.vm.network "private_network", ip: "192.168.80.10", virtualbox__intnet: "vagrant-win-vpn"

    ansible_controller.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.install = false
      ansible.playbook = "provision/router_provision.yml"
      ansible.inventory_path = "provision/inventory.yml"
      ansible.limit = "router"
      ansible.extra_vars = {
        purevpn_server:   purevpn_server,
        purevpn_protocol: purevpn_protocol,
        purevpn_user:     purevpn_user,
        purevpn_password: purevpn_password,
        lan_if_ipv4: "192.168.80.11",
      }
    end

    ansible_controller.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.install = false
      ansible.playbook = "provision/win_provision.yml"
      ansible.extra_vars = {
        ansible_password: "#{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}",
      }
      ansible.inventory_path = "provision/inventory.yml"
      ansible.limit = "win10"
    end
  end
end
