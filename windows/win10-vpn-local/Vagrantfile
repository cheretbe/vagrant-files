require File.expand_path("../../../lib/host_functions.rb", __FILE__)

local_settings = read_local_settings([
  {"name" => "purevpn_server", "default" => "nl2-ovpn-udp.pointtoserver.com"},
  {"name" => "purevpn_protocol", "default" => "udp"},
  {"name" => "purevpn_user"},
  {"name" => "purevpn_password"},
  {"name" => "sound", "default" => false}
])

Vagrant.configure("2") do |config|
  config.vm.define :"router" do |router|
    router.vm.box = "ubuntu/focal64"
    router.vm.hostname = "router"
    router.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--uart1", "off"]
      vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
    end

    router.vm.network "private_network", ip: "192.168.80.11",
      virtualbox__intnet: "vagrant-win-vpn", mac: "080027F441DB"

    router.vm.provision "shell", name: "Enable cleartext passwords for SSH",
      keep_color: true,
      inline: <<-SHELL
        set -euo pipefail
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL

    # It seems that "Configuring and enabling network interfaces..." step of
    # `vagrant up` somehow breaks routing through the VPN. Until we know what
    # exactly going on, use this crude workaround
    router.vm.provision "shell", name: "Restart openvpn-client@purevpn service",
      keep_color: true, run: "always",
      inline: <<-SHELL
        set -euo pipefail
        if systemctl is-active --quiet openvpn-client@purevpn; then
          echo "Restarting openvpn-client@purevpn service"
          systemctl restart openvpn-client@purevpn
        fi
      SHELL
  end

  config.vm.define "win10" do |win10|
    win10.vm.box = "cheretbe/win10_gui"

    win10.vm.provider "virtualbox" do |vb|
      if local_settings.sound
        add_audio_controler(vb)
      end
    end

    win10.vm.network "private_network", ip: "192.168.80.12", virtualbox__intnet: "vagrant-win-vpn"

    # "Configuring and enabling network interfaces..." step of `vagrant up`
    # resets default route.
    win10.vm.provision "shell", name: "Force default route fix",
        run: "always", inline: <<-SHELL
      # [enum]::GetValues([Microsoft.PowerShell.Cmdletization.GeneratedTypes.ScheduledTask.StateEnum])
      if ((Get-ScheduledTask -TaskName "Vagrant - Fix default route").State -ne "Running") {
        Write-Output "Executing scheduled task 'Vagrant - Fix default route'"
        Start-ScheduledTask -TaskName "Vagrant - Fix default route"
      }
    SHELL
  end

  config.vm.define :"ansible-controller" do |ansible_controller|
    ansible_controller.vm.box = "cheretbe/ansible-controller"
    ansible_controller.vm.hostname = "ansible-controller"
    ansible_controller.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
    end
    ansible_controller.vm.network "private_network", ip: "192.168.80.10", virtualbox__intnet: "vagrant-win-vpn"

    ansible_controller.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.install = false
      ansible.playbook = "provision/controller_provision.yml"
    end

    ansible_controller.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.install = false
      ansible.playbook = "provision/router_provision.yml"
      ansible.inventory_path = "provision/inventory.yml"
      ansible.limit = "router"
      ansible.extra_vars = {
        purevpn_ovpn_client_server:   local_settings.purevpn_server,
        purevpn_ovpn_client_user:     local_settings.purevpn_user,
        purevpn_ovpn_client_protocol: local_settings.purevpn_protocol,
        purevpn_ovpn_client_password: local_settings.purevpn_password,
        purevpn_ovpn_client_operator_key: "/vagrant/.vagrant/machines/router/virtualbox/private_key",
        purevpn_ovpn_client_keys_dir: "/vagrant/temp",
        purevpn_ovpn_client_operator: "vagrant",
        router_lan_mac_addr: "08:00:27:f4:41:db",
        router_wan_if_name:  "ovpn-purevpn"
      }
    end

    ansible_controller.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.install = false
      ansible.playbook = "provision/win_provision.yml"
      ansible.extra_vars = {
        ansible_password: "#{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}",
        win_vpn_client_user_name: "vagrant",
        win_vpn_client_ssh_key: "c:\\vagrant\\temp\\operator_key.ppk",
        win_vpn_client_router: "192.168.80.11",
        win_vpn_client_router_user: "vagrant"
      }
      ansible.inventory_path = "provision/inventory.yml"
      ansible.limit = "win10"
    end
  end
end
