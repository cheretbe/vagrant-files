---
- name: Router box provision
  hosts: all

  tasks:
    - name: Print host information
      debug:
        msg: "{{ ansible_fqdn }}: {{ ansible_distribution }} {{ ansible_distribution_version}}"

    - name: Make sure '/etc/systemd/resolved.conf.d' directory exists
      file:
        path: /etc/systemd/resolved.conf.d
        state: directory
        mode: 0755
        owner: root
        group: root
      become: true

    - name: Disable systemd-resolved DNS stub
      copy:
        content: |
          # Generated by Ansible at {{ lookup('pipe', 'hostname -f') }}
          # Any changes made here will be overwritten
          [Resolve]
          DNSStubListener=no
        dest: /etc/systemd/resolved.conf.d/10-disable-dns-stub.conf
        mode: 0644
      become: true
      register: systemd_resolved_stub_info

    - name: Get information on '/etc/resolv.conf' file
      ansible.builtin.stat:
        path: /etc/resolv.conf
      register: resolv_conf_info

    - name: "Update '/etc/resolv.conf' symlink"
      file:
        src: "/run/systemd/resolve/resolv.conf"
        dest: "/etc/resolv.conf"
        state: link
      when: >-
        resolv_conf_info.stat.islnk
        and
        resolv_conf_info.stat.lnk_source == "/run/systemd/resolve/stub-resolv.conf"
      become: true

      # Notification handler won't do: we need working DNS during dnsmasq installation
    - name: Restart systemd-resolved service
      service:
        name: systemd-resolved.service
        state: restarted
      become: true
      when: systemd_resolved_stub_info.changed

    - name: Add Speedtest repository key
      apt_key:
        url: https://packagecloud.io/ookla/speedtest-cli/gpgkey
        state: present
      become: yes

    - name: Add Speedtest repository
      apt_repository:
        repo: deb https://packagecloud.io/ookla/speedtest-cli/ubuntu/ {{ ansible_distribution_release }} main
        state: present
      become: yes

    - name: Install apt packages
      apt:
        name: [
          "iptables-persistent", "netfilter-persistent", "dnsmasq", "openvpn",
          "putty-tools", "speedtest"
        ]
        update_cache: yes
        # # 1 hour
        cache_valid_time: 3600
      become: yes

    - name: Convert vagrant user private key file to PPK format
      ansible.builtin.command:
        cmd: >-
          puttygen
          /vagrant/.vagrant/machines/router/virtualbox/private_key
          -o /vagrant/temp/vagrant_private_key.ppk
        # We deliberately skipping this check to prevent ending up with an old
        # key after destroy/up cycle
        # creates: /vagrant/temp/vagrant_private_key.ppk

    - name: Enable IPv4 forwarding
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      become: yes

    - name: Create Purevpn OpenVPN config
      ansible.builtin.template:
        src: purevpn.conf.j2
        dest: /etc/openvpn/client/purevpn.conf
        owner: root
        group: root
        mode: '0644'
      become: yes
      notify: Restart 'openvpn-client@purevpn' service

    - name: Create Purevpn user credentials file
      ansible.builtin.copy:
        content: |-
          {{ purevpn_user }}
          {{ purevpn_password }}
        dest: /etc/openvpn/client/purevpn_credentials
        owner: root
        group: root
        mode: '0600'
      become: yes
      notify: Restart 'openvpn-client@purevpn' service

    - name: Copy resolv.conf update script
      ansible.builtin.copy:
        src: update_resolve_conf.py
        dest: /etc/openvpn/client/update_resolve_conf.py
        owner: root
        group: root
        mode: '0755'
      become: yes

    - name: Enable and start 'openvpn-client@purevpn' service
      ansible.builtin.systemd:
        name: openvpn-client@purevpn.service
        state: started
        enabled: yes
      become: yes

    - name: Get LAN interface name
      set_fact:
        lan_if_name: "{{ item }}"
      loop: "{{ ansible_interfaces }}"
      when: "lookup('vars', 'ansible_' + item).ipv4['address'] == lan_if_ipv4"

    - name: iptables - NAT LAN client's connections
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        source: 192.168.80.0/24
        out_interface: tun0
        jump: MASQUERADE
        comment: NAT LAN client's connections
      become: yes
      notify: Save iptables state

    - name: iptables - Drop non-VPN LAN client's connections
      ansible.builtin.iptables:
        table: filter
        chain: FORWARD
        source: 192.168.80.0/24
        # Note the '!'
        out_interface: "!tun0"
        jump: DROP
        comment: Drop non-VPN LAN client's connections
      become: yes
      notify: Save iptables state

    - name: iptables - Allow SSH from non-WAN interfaces
      ansible.builtin.iptables:
        table: filter
        chain: INPUT
        protocol: tcp
        destination_port: 22
        # Note the '!'
        in_interface: "!tun0"
        jump: ACCEPT
        comment: Allow SSH from non-WAN interfaces
      become: yes
      notify: Save iptables state

    - name: iptables - Allow loopback connections
      ansible.builtin.iptables:
        table: filter
        chain: INPUT
        in_interface: lo
        jump: ACCEPT
        comment: Allow loopback connections
      become: yes
      notify: Save iptables state

    - name: iptables - Allow ICMP (INPUT)
      ansible.builtin.iptables:
        table: filter
        chain: INPUT
        protocol: icmp
        jump: ACCEPT
        comment: Allow ICMP
      become: yes
      notify: Save iptables state

    - name: iptables - Allow LAN connections (INPUT)
      ansible.builtin.iptables:
        table: filter
        chain: INPUT
        in_interface: "{{ lan_if_name }}"
        jump: ACCEPT
        comment: Allow LAN connections
      become: yes
      notify: Save iptables state

    - name: iptables - Allow LAN connections (FORWARD)
      ansible.builtin.iptables:
        table: filter
        chain: FORWARD
        in_interface: "{{ lan_if_name }}"
        jump: ACCEPT
        comment: Allow LAN connections
      become: yes
      notify: Save iptables state

    - name: iptables - Allow established and related connections (INPUT)
      ansible.builtin.iptables:
        table: filter
        chain: INPUT
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
        comment: Allow established and related connections
      become: yes
      notify: Save iptables state

    - name: iptables - Allow established and related connections (FORWARD)
      ansible.builtin.iptables:
        table: filter
        chain: FORWARD
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
        comment: Allow established and related connections
      become: yes
      notify: Save iptables state

    - name: iptables - Set the policy for the INPUT chain to DROP
      ansible.builtin.iptables:
        chain: INPUT
        policy: DROP
      become: yes
      notify: Save iptables state

    - name: iptables - Set the policy for the FORWARD chain to DROP
      ansible.builtin.iptables:
        chain: FORWARD
        policy: DROP
      become: yes
      notify: Save iptables state

  handlers:
    - name: Save iptables state
      community.general.iptables_state:
        state: saved
        path: /etc/iptables/rules.v4
      become: yes

    - name: Restart 'openvpn-client@purevpn' service
      ansible.builtin.systemd:
        name: openvpn-client@purevpn.service
        state: restarted
      become: yes
