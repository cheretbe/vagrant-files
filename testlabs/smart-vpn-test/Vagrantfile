require File.expand_path("../../../lib/host_functions.rb", __FILE__)

local_settings = read_local_settings([
  {"name" => "linux_memory", "default" => "2048"},
  {"name" => "common_repo_source", "default" => "master"},
  {"name" => "ovpn_client_server_type"},
  {"name" => "ovpn_client_server", "default" => "nl2-ovpn-udp.pointtoserver.com"},
  {"name" => "ovpn_client_protocol", "default" => "udp"},
  {"name" => "ovpn_client_purevpn_user"},
  {"name" => "ovpn_client_purevpn_password"}
])

Vagrant.configure("2") do |config|

  define_ansible_controller config, ip="192.168.80.80",
    intnet_name: "vagrant-vpn-test",
    common_repo_source: local_settings.common_repo_source do |ansible_controller|
      ansible_controller.vm.provider "virtualbox" do |vb|
        vb.memory = "1024"
      end
  end

  config.vm.define :router do |router|
    # router.vm.box = "cheretbe/routeros-long-term"
    router.vm.box = "cheretbe/routeros"
    router.vm.hostname = "router"
    router.vm.network "private_network", virtualbox__intnet: "vagrant-vpn-test", auto_config: false

    router.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--nictype3", "virtio"]
    end

    router.vm.provision "routeros_file", name: "Upload provision script",
      source: "provision/router_provision.rsc", destination: "router_provision.rsc"
    router.vm.provision "routeros_command", name: "Run provision script",
      command: "/import router_provision.rsc", check_script_error: true
  end

  config.vm.define :"vpn-router" do |vpn_router|
    vpn_router.vm.box = "ubuntu/focal64"
    vpn_router.vm.hostname = "vpn-router"
    vpn_router.vm.provider "virtualbox" do |vb|
      vb.memory = local_settings.linux_memory
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--uart1", "off"]
      vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
      vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
    end

    vpn_router.vm.network "private_network", virtualbox__intnet: "vagrant-vpn-test",
      ip: "192.168.80.82", mac: "080027F7F0CC"
    vpn_router.vm.synced_folder "/", "/host"
    vpn_router.vm.synced_folder Dir.home, "/host_home"

    vpn_router.vm.provision "shell", name: "Enable cleartext passwords for SSH",
      keep_color: true,
      inline: <<-SHELL
        set -euo pipefail
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL

    # It seems that "Configuring and enabling network interfaces..." step of
    # `vagrant up` somehow breaks routing through the VPN. Until we know what
    # exactly going on, use this crude workaround
    vpn_router.vm.provision "shell", name: "Restart openvpn-client@purevpn service",
      keep_color: true, run: "always",
      inline: <<-SHELL
        set -euo pipefail
        if systemctl is-active --quiet openvpn-client@purevpn; then
          echo "Restarting openvpn-client@purevpn service"
          systemctl restart openvpn-client@purevpn
        fi
      SHELL

    ansible_provision vpn_router,
      playbook="vpn_router_provision.yml",
      extra_vars: {
        "ovpn_client_purevpn_user"     => local_settings.ovpn_client_purevpn_user,
        "ovpn_client_purevpn_password" => local_settings.ovpn_client_purevpn_password,
        "ovpn_client_server"           => local_settings.ovpn_client_server,
        "ovpn_client_server_type"      => local_settings.ovpn_client_server_type,
        "ovpn_client_protocol"         => local_settings.ovpn_client_protocol,
        "router_wan_if_name"           => "ovpn-purevpn",
        # "router_lan_if_mac_addr"       => "08:00:27:f7:f0:cc"
        "router_lan_if_name"           => "vlan.101"
      }
  end

  config.vm.define :"client" do |client|
    client.vm.box = "ubuntu/focal64"
    client.vm.hostname = "vpn-client"
    client.vm.provider "virtualbox" do |vb|
      vb.memory = local_settings.linux_memory
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--uart1", "off"]
      vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
      vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
    end

    client.vm.network "private_network", virtualbox__intnet: "vagrant-vpn-test",
      ip: "192.168.80.83"
    client.vm.synced_folder "/", "/host"
    client.vm.synced_folder Dir.home, "/host_home"

    client.vm.provision "shell", name: "Enable cleartext passwords for SSH",
      keep_color: true,
      inline: <<-SHELL
        set -euo pipefail
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL

    ansible_provision client,
      playbook="client_provision.yml"
  end
end
