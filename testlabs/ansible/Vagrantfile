require File.expand_path("../../../lib/host_functions.rb", __FILE__)

check_env_variables(
  mandatory_vars: ["AO_DEFAULT_VAGRANT_PASSWORD"],
  optional_vars:["AO_TELEGRAM_CHAT_ID", "AO_TELEGRAM_BOT_TOKEN"]
)

local_settings = read_local_settings([
  {"name" => "use_awx", "default" => false},
  {"name" => "awx_version", "default" => ""},
  {"name" => "ansible_vm_memory", "default" => "4096"},
  {"name" => "ansible_vm_cpus", "default" => "1"},
  {"name" => "package_cache_host", "default" => ""},
  {"name" => "docker_mirror_param", "default" => ""}
])


required_plugins = %w(vagrant-vbguest)

#TODO: move this to a common function
plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "This Vagrantfile needs one or more additional plugins to be installed: #{plugins_to_install.join(', ')}"
  puts "Use the following command:\n\n"
  puts "vagrant plugin install #{plugins_to_install.join(' ')}\n\n"
  abort "Installation of one or more additional plugins needed. Aborting."
end

Vagrant.configure("2") do |config|
  config.vm.define :ansible do |ansible|
    ansible.vm.box = "cheretbe/ansible-controller"
    ansible.vm.provider "virtualbox" do |vb|
      vb.memory = local_settings.ansible_vm_memory
      vb.cpus = local_settings.ansible_vm_cpus
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      # prevent 'ubuntu-xenial-16.04-cloudimg-console.log' file creation
      vb.customize [ "modifyvm", :id, "--uartmode1", "file", File::NULL ]
      # vb.customize ["modifyvm", :id, "--audio", "pulse", "--audiocontroller", "ac97"]
      # vb.customize ["modifyvm", :id, "--audio", "pulse", "--audiocontroller", "hda"]
    end

    ansible.vm.hostname = "ansible-vm"
    ansible.vm.network "forwarded_port", guest: 80, host: 8080
    ansible.vm.network "private_network", ip: "192.168.80.50", virtualbox__intnet: "vagrant-intnet"

    ansible.vm.synced_folder "../../../", "/ansible-playbooks"
    ansible.vm.synced_folder Dir.home, "/host_home"

    # TODO: https://github.com/cheretbe/vagrant-files/issues/7
    # set_local_package_cache_host(ansible, local_settings.package_cache_host)

    ansible.vm.provision "shell",
      name: "PIP packages installation",
      keep_color: true, privileged: true,
      inline: <<-SHELL
        (
          . /home/vagrant/.cache/venv/ansible/bin/activate
          cd /home/vagrant/.cache
          wget --no-verbose \\
            https://raw.githubusercontent.com/cheretbe/ansible-playbooks/master/dev_requirements.txt
          pip3 install -r dev_requirements.txt
        )
      SHELL

    ansible.vm.provision "file",
      source: Dir.home + "/.vagrant.d/insecure_private_key",
      destination: "/home/vagrant/.ssh/id_rsa"

    ansible.vm.provision "shell",
      name: "Ansible configuration",
      keep_color: true, privileged: false,
      inline: <<-SHELL
        set -e

        echo "Copying config file"
        cp /vagrant/provision/ansible.cfg /home/vagrant/.ansible.cfg

        echo "Configuring SSH"
        chmod 700 /home/vagrant/.ssh
        chmod 600 /home/vagrant/.ssh/id_rsa
        ssh-keygen -y -f /home/vagrant/.ssh/id_rsa > /home/vagrant/.ssh/id_rsa.pub

        echo "Setting AO_DEFAULT_VAGRANT_PASSWORD env variable"
        sudo sh -c 'echo "export AO_DEFAULT_VAGRANT_PASSWORD=#{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}" > /etc/profile.d/test_settings.sh'
      SHELL

    # TODO: consider moving this to the shared Ansible repo
    ansible.vm.provision "ansible_local" do |ansible_local|
      ansible_local.compatibility_mode = "2.0"
      ansible_local.install = false
      ansible_local.playbook = "provision/notification.yml"
      ansible_local.extra_vars = {
        telegram_chat_id: ENV["AO_TELEGRAM_CHAT_ID"] || nil,
        telegram_chat_bot_token: ENV["AO_TELEGRAM_BOT_TOKEN"] || nil
      }
    end

    if local_settings.use_awx then
      ansible.vm.provision "shell", name: "AWX installation",
        keep_color: true, privileged: false,
        inline: <<-SHELL
          /ansible-playbooks/tools/awx/install_awx.py --batch-mode \\
            #{local_settings.awx_version} #{local_settings.docker_mirror_param} \\
            --project-data-folder /opt && \\
          /ansible-playbooks/tools/debug/configure_tower_cli.sh && \\
          /ansible-playbooks/tools/debug/set_test_config.sh
        SHELL
    end
  end

  config.vm.define :"ubuntu-focal", autostart: false do |ubuntu_focal|
    ubuntu_focal.vm.box = "ubuntu/focal64"
    ubuntu_focal.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
    end
    ubuntu_focal.vm.hostname = "ubuntu-focal"
    ubuntu_focal.vm.network "private_network", ip: "192.168.80.51", virtualbox__intnet: "vagrant-intnet"

    config.vm.synced_folder "/", "/host"
    config.vm.synced_folder Dir.home, "/host_home"

    ubuntu_focal.vm.provision "shell", name: "SSH configuration",
      keep_color: true, privileged: false,
      inline: <<-SHELL
        set -e
        python3 /vagrant/provision/setup_host.py
      SHELL
  end

  config.vm.define :"ubuntu-bionic", autostart: false do |ubuntu_bionic|
    ubuntu_bionic.vm.box = "ubuntu/bionic64"
    ubuntu_bionic.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      # prevent 'ubuntu-xenial-16.04-cloudimg-console.log' file creation
      vb.customize [ "modifyvm", :id, "--uartmode1", "file", File::NULL ]
    end
    ubuntu_bionic.vm.hostname = "ubuntu-bionic"
    ubuntu_bionic.vm.network "private_network", ip: "192.168.80.52", virtualbox__intnet: "vagrant-intnet"

    ubuntu_bionic.vm.provision "shell", name: "SSH configuration",
      keep_color: true, privileged: false,
      inline: <<-SHELL
        set -e
        python3 /vagrant/provision/setup_host.py
      SHELL
  end

  config.vm.define :"ubuntu-xenial", autostart: false do |ubuntu_xenial|
    ubuntu_xenial.vm.box = "ubuntu/xenial64"
    ubuntu_xenial.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      # prevent 'ubuntu-xenial-16.04-cloudimg-console.log' file creation
      vb.customize [ "modifyvm", :id, "--uartmode1", "file", File::NULL ]
    end
    ubuntu_xenial.vm.hostname = "ubuntu-xenial"
    ubuntu_xenial.vm.network "private_network", ip: "192.168.80.53", virtualbox__intnet: "vagrant-intnet"

    ubuntu_xenial.vm.provision "shell", name: "SSH configuration",
      keep_color: true, privileged: false,
      inline: <<-SHELL
        set -e
        python3 /vagrant/provision/setup_host.py
      SHELL
  end

  config.vm.define :"centos-7", autostart: false do |centos_7|
    centos_7.vm.box = "centos/7"
    centos_7.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
    end

    centos_7.vbguest.auto_update = true
    centos_7.vbguest.installer_options = { allow_kernel_upgrade: true }

    centos_7.vm.hostname = "centos-7"
    centos_7.vm.network "private_network", ip: "192.168.80.54", virtualbox__intnet: "vagrant-intnet"

    centos_7.vm.provision "shell", name: "SSH configuration",
      keep_color: true, privileged: false,
      inline: <<-SHELL
        set -e
        sudo yum install -y python3
        python3 /vagrant/provision/setup_host.py
      SHELL
  end

  config.vm.define :"centos-8", autostart: false do |centos_8|
    centos_8.vm.box = "centos/8"
    centos_8.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
    end

    centos_8.vbguest.auto_update = true
    # centos_8.vbguest.installer_options = {enablerepo: true}
    centos_8.vbguest.installer_options = { allow_kernel_upgrade: true }

    centos_8.vm.hostname = "centos-8"
    centos_8.vm.network "private_network", ip: "192.168.80.55", virtualbox__intnet: "vagrant-intnet"

    centos_8.vm.provision "shell", name: "SSH configuration",
      keep_color: true, privileged: false,
      inline: <<-SHELL
        set -e
        sudo dnf install -y python3
        python3 /vagrant/provision/setup_host.py
      SHELL
  end

  config.vm.define :win10, autostart: false do |win10|
    win10.vm.box = "cheretbe/win10ltsc2019_ru_64"
    # win10.vm.box = "cheretbe/win10_en_64"
    win10.winrm.username = "vagrant"
    win10.winrm.password = "#{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}"
    win10.vm.boot_timeout = 600
    win10.vm.hostname = "win10"
    win10.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = "2"
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    end
    win10.vm.network "private_network", ip: "192.168.80.56", virtualbox__intnet: "vagrant-intnet"

    win10.vm.synced_folder Dir.home, "/host_home"
  end

end