class CustomAnsibleError < Vagrant::Errors::VagrantError
  error_message(
    "Ansible provision failed to complete successfully. Any error output should be visible above"
  )
end

# Based on:
# https://github.com/hashicorp/vagrant/blob/main/plugins/provisioners/ansible/provisioner/base.rb
# https://github.com/hashicorp/vagrant/blob/main/plugins/provisioners/ansible/provisioner/guest.rb
def ansible_provision(machine, target_host, playbook, extra_vars: {})
  machine.ui.info("Provisioning with Ansible playbook '#{playbook}'")
  env_variables = "PYTHONUNBUFFERED=1"
  env_variables += " ANSIBLE_FORCE_COLOR=true" if machine.env.ui.color?

  command = "#{env_variables} "\
            "/home/vagrant/.cache/venv/ansible/bin/ansible-playbook "\
            "-i /vagrant/provision/inventory.yml "\
            "-l #{target_host} --extra-vars #{extra_vars.to_json.shellescape} "\
            "/vagrant/provision/#{playbook}"
  Vagrant.global_logger.info("Ansible command: #{command}")

  ansible_controller = machine.env.machine(:"ansible-controller", :virtualbox)
  result = ansible_controller.communicate.execute(command, error_check: false) do |type, data|
    if [:stderr, :stdout].include?(type)
      machine.env.ui.info(data, new_line: false, prefix: false)
    end
  end
  raise CustomAnsibleError if result != 0
end

class CustomProvisionPlugin < Vagrant.plugin('2')
  class CustomProvisionAction
    def initialize(app, env)
      @app = app
    end

    def call(env)
      @app.call(env)
      machine = env[:machine]
      class << machine
        attr_accessor :custom_provision_enabled
      end
      machine.custom_provision_enabled = env[:provision_enabled]
    end
  end

  name "custom_provision"

  action_hook "custom_provision" do |hook|
    hook.after Vagrant::Action::Builtin::Provision, CustomProvisionAction
  end
end

require File.expand_path("../../../lib/host_functions.rb", __FILE__)

# local_settings = read_local_settings([
#   {"name" => "purevpn_server", "default" => "nl2-ovpn-udp.pointtoserver.com"},
#   {"name" => "purevpn_protocol", "default" => "udp"},
#   {"name" => "purevpn_user"},
#   {"name" => "purevpn_password"},
#   {"name" => "sound", "default" => false}
# ])

Vagrant.configure("2") do |config|
  config.vm.define :"ansible-controller" do |ansible_controller|
    ansible_controller.vm.box = "cheretbe/ansible-controller"
    ansible_controller.vm.hostname = "ansible-controller"
    ansible_controller.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
    end
    ansible_controller.vm.network "private_network", ip: "192.168.80.10", virtualbox__intnet: "vagrant-win-vpn"

    ansible_controller.vm.synced_folder "/", "/host"
    ansible_controller.vm.synced_folder Dir.home, "/host_home"

    ansible_controller.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.install = false
      ansible.playbook = "provision/controller_provision.yml"
    end

    # ansible_controller.vm.provision "shell", name: "Provision Ansible controller",
    #   keep_color: true,
    #   inline: <<-SHELL
    #     set -euo pipefail

    #     python3 <<EOF
    #     print('Hello')
    #     print("there you go")
    #     EOF
    #   SHELL
  end

  config.vm.define :"server" do |server|
    server.vm.box = "ubuntu/focal64"
    server.vm.hostname = "server"
    server.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--uart1", "off"]
      vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
    end

    server.vm.network "private_network", ip: "192.168.80.11",
      virtualbox__intnet: "vagrant-win-vpn", mac: "080027F441DB"

    server.vm.synced_folder "/", "/host"
    server.vm.synced_folder Dir.home, "/host_home"

    server.vm.provision "shell", name: "Enable cleartext passwords for SSH",
      keep_color: true,
      inline: <<-SHELL
        set -euo pipefail
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL

    server.trigger.after [:up, :reload, :provision] do |trigger|
      trigger.ruby do |env,machine|
        if machine.custom_provision_enabled
          ansible_provision machine,
            target_host="server",
            playbook="server_provision.yml",
            extra_vars: {
              "var1": "value1",
              "var2": "value2 with space"
            }
        end
      end
    end
  end

  config.vm.define "win10", autostart: false do |win10|
    win10.vm.box = "cheretbe/win10_gui"

    win10.vm.network "private_network", ip: "192.168.80.12", virtualbox__intnet: "vagrant-win-vpn"

    win10.vm.synced_folder "/", "/host"
    win10.vm.synced_folder Dir.home, "/host_home"

    # "Configuring and enabling network interfaces..." step of `vagrant up`
    # resets default route. Fixing
    win10.vm.provision "shell", name: "Force default route fix",
        run: "always", keep_color: true, path: "provision/win_on_up.ps1",
        args: "-vagrantPassword #{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}"
  end

end
