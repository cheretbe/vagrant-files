require File.expand_path("../../../lib/host_functions.rb", __FILE__)

local_settings = read_local_settings([
  {"name" => "ovpn_server_protocol", "default" => "udp"},
  {"name" => "ovpn_server_dns_resolver", "default" => true},
  {"name" => "common_repo_source", "default" => "master"}
])

Vagrant.configure("2") do |config|
  define_ansible_controller(
    config=config,
    ip="192.168.80.60",
    common_repo_source: local_settings.common_repo_source
  )

  config.vm.define :"server" do |server|
    server.vm.box = "ubuntu/focal64"
    server.vm.hostname = "server"
    server.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--groups", "/__vagrant"]
      vb.customize ["modifyvm", :id, "--uart1", "off"]
      vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
    end

    server.vm.network "private_network", ip: "192.168.80.61",
      virtualbox__intnet: "vagrant-intnet", mac: "080027840F13"

    server.vm.synced_folder "/", "/host"
    server.vm.synced_folder Dir.home, "/host_home"

    server.vm.provision "shell", name: "Enable cleartext passwords for SSH",
      keep_color: true,
      inline: <<-SHELL
        set -euo pipefail
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL

    # We use themporary file to pass box's NAT adapter MAC address
    server.trigger.after [:up, :reload, :provision, :snapshot_restore] do |trigger|
      trigger.ruby do |env,machine|
        if machine.state.id == :running and machine.custom_provision_enabled
          require 'yaml'
          server_mac_addr = machine.provider.driver.read_mac_address
          # 02134CC3B1F0 => 02:13:4c:c3:b1:f0
          server_mac_addr = server_mac_addr.downcase.scan(/.{2}/).join(":")
          machine.ui.detail("Writing 'provision/host_vars/server.yml'")
          File.open(File.expand_path("../provision/host_vars/server.yml", __FILE__), "w") {
            |f| YAML.dump({"router_wan_if_mac_addr" => server_mac_addr}, f)
          }
        end
      end
    end

    ansible_provision server,
      playbook="server_provision.yml",
      extra_vars: {
        "use_local_repo":           local_settings.use_local_repo,
        "ovpn_server_ca_cert":      "/vagrant/temp/test-ca/ca.crt",
        "ovpn_server_cert":         "/vagrant/temp/test-ca/keys/server.crt",
        "ovpn_server_key":          "/vagrant/temp/test-ca/keys/server.key",
        "ovpn_server_ta_key":       "/vagrant/temp/test-ca/ta.key",
        "ovpn_server_dns_name":     "vpn.example.com",
        "ovpn_server_protocol":     local_settings.ovpn_server_protocol,
        "ovpn_server_dns_resolver": local_settings.ovpn_server_dns_resolver,
        "router_lan_if_name":       "tun0",
        "router_allow_wan_ssh":     true,
        "router_custom_ports": [
          {"protocol": local_settings.ovpn_server_protocol, "port": 1194, "comment": "Allow VPN"}
        ]
      }
  end

  config.vm.define "win10", autostart: false do |win10|
    win10.vm.box = "cheretbe/win10_gui"

    win10.vm.network "private_network", ip: "192.168.80.62", virtualbox__intnet: "vagrant-intnet"

    win10.vm.synced_folder "/", "/host"
    win10.vm.synced_folder Dir.home, "/host_home"

    ansible_provision win10,
      playbook="win_provision.yml",
      extra_vars: {
        "ansible_password": "#{ENV['AO_DEFAULT_VAGRANT_PASSWORD']}"
      }
  end

end
